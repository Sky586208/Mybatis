<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace：命名空间，用于隔离sql，还有一个很重要的作用，后面会讲 -->
<mapper namespace="com.sky.mybatis.mapper.UserMapper">

	<!-- id:statement的id 或者叫做sql的id-->
	<!-- parameterType:声明输入参数的类型 -->
	<!-- resultType:声明输出结果的类型，应该填写pojo的全路径 -->
	<!-- #{}：输入参数的占位符，相当于jdbc的？ -->
	<select id="findUserById" parameterType="Integer"
		    resultType="com.sky.mybatis.pojo.User">
		select * from user where id  = #{v}
	</select>
	
	<!--根据用户名模糊查询用户列表 
	#{}   占位符        ?    == '五'
	${}   字符串拼接  '%五%'  == "%"'五'"%"
	-->
	
	<select id ="findUserByUsername"  parameterType ="String"
	        resultType = "com.sky.mybatis.pojo.User">
	     select * from user where username like "%"#{v}"%"
	</select>

    <!--添加用户  -->
    <insert id="insertUser"  parameterType="com.sky.mybatis.pojo.User">
    
       <selectKey keyProperty="id" resultType="Integer" order="AFTER">
             select LAST_INSERT_ID()
       </selectKey>
        insert into user  (username,birthday,sex,address)   
                    values (#{username},#{birthday},#{sex},#{address})
    </insert>
    <!-- 更新用户 -->
    <update id="updateUserById" parameterType="com.sky.mybatis.pojo.User">
    
       update user
       set username = #{username},sex = #{sex},birthday = #{birthday},address = #{address}
       where id = #{id}
     </update>
     
     <!--删除用户  -->
     <delete id="deleteUserById"   parameterType="Integer">
     
     delete from user  
     where id = #{v}
     </delete>
     
</mapper>